這幾天開始做aes
1.js是用utf-16編碼，可以用str.charCodeAt(x)去把x位置的unicode找出來
  這時候的unicode還要用toString轉換成16進位的字串，因為他是十進位的
2.字串的slice(x)是指你要第x位的字串，從頭開始算，如果是負的就從尾巴
3.parseInt(x,16)可以把身為字串的x以從16進位的轉成10進位，String.fromCharCode()
是String的涵式方法，功能是把身為數字的unicode轉換成字串
4.str.substr(x,n)不知為什麼str的s沒有大寫，命名和其他有點不同，這裡的x和n代表的各是
字串的起使點和要取的位數

5.開始做subByte，這裡單純的初始了一個同大小的陣列，依照每個原陣列的值從s_box找到相對
應的替換值，方使是把值從十六進位轉換到十進位當坐陣列的索引值，照著表和陣列之間的規律
性，找到對應的，這裡因為若是0開頭的的十六進位，例如0x08，會只剩下8。因此前面加上'0'後
，以slice(-2)確保能有兩位，也就是1byte為基本單位

6.做shiftRow，同樣的初始一個陣列，接個把剛剛subByte的結果，
以shiftArr[i][j] = subArr[i][((j%4)*4+j)%16]進行判斷後填入，這裡前面的(j%4)*4+j是因為
陣列索引值j等於0.4.8.12時不用移位，1.5.9.13g時往左移1位，2.6.10.14時則是兩位，依此類
推，可知j和4取餘數*4便是移位後的索引數字，而後面的%16則是避免超過陣列的情況發生，
例如13+4=17，但其實是要移到1，因此和16取餘數辨識。

7.做mixColumn，同樣得先建置一個空的陣列存放mix完的內容，依照維基的方法採用查表的方式進行乘以2和乘以3的計算，
 方法是下面這條，一欄欄的進行操作，所以要用%4和flag控制下三位的位置，避免跑到下一欄去。
 mixArr[i][j] = ((mul2[parseInt(shiftArr[i][j],16)])^(mul3[parseInt(shiftArr[i][(j+1)%4+flag*4],16)])^(shiftArr[i][(j+2)%4+flag*4])^(shiftArr[i][(j+3)%4+flag*4])).toString(16);
 這裡曾嘗試用mul2['0x'+shiftArr[i][j])來辨識16近位，看能不能少呼叫parseInt()函式，但發現這種方式會讓mul2的索引值成為
 字串，造成換算成別的數字，簡單來說，也就是mul2['0x84']和mul2[0x84]的差別，所以仍繼續使用parseInt()

8.做金鑰的產生，可供輸入以及使用預設值，為方便觀察，預設值以'00'~'0f'代表，產生一陣列key[]。

9.做keyExpansion，照著講義設定為10round，也就是把16bytes擴展成10+1個16bytes的round keys。要生成接下來幾輪的key，
需要生成一個temp[4]，第一步是把最後一欄左位移一位，接著把其內容做sbox的置換，這部分跟subByte()很像，
置換完後和rcon[]進行xor，rcon[]事先從維基百科的Rcon[256]取Rcon[10]
建好，在進行xor時，只有的第一位須要算，要先加上0x告訴電腦這是16進位的運算。算出來後，最開始的temp[]
就誕生了，接下來生成第一欄的key，方法是用上一回合的同一欄key值和temp[]
做xor。第二欄key生成時，要先把temp更新為第一欄的key值，在和上一回合的第二欄作xor， 依此類推。接下來的回合也是同樣作法。

10.addRound()，這裡就把key依照回合和每次的state xor就可以了

11.基本功能都完成後，就是密文的生成了，把它們包在encrypt()裡面，並顯示輸出結果。



mixArr[i][j] = (('0'+mul2[parseInt(shiftArr2[i][j],16)]).slice(-2))^(('0'+mul3[parseInt(shiftArr2[i][(j+1)%4+flag*4],16)]).slice(-2))^(('0'+shiftArr2[i][(j+2)%4+flag*4]).slice(-2))^(('0'+shiftArr2[i][(j+3)%4+flag*4]).slice(-2));

var s_box = {
mixArr[i][j] = (('0'+mul2[parseInt(shiftArr2[i][j],16)]).slice(-2))^('0'+mul3[parseInt(shiftArr2[i][(j+1)%4+flag*4],16)].slice(-2))^('0'+shiftArr2[i][(j+2)%4+flag*4].slice(-2))^('0'+shiftArr2[i][(j+3)%4+flag*4].slice(-2));

    '00':0x63,'01':0x7C,'02':0x77,'03':0x7B,'04':0xF2,'05':0x6B,'06':0x6F,'07':0xC5,
    '08':0x30,'09':0x01,'0A':0x67,'0B':0x2B,'0C':0xFE,'0D':0xD7,'0E':0xAB,'0F':0x76,
    '10':0xCA,'11':0x82,'12':0xC9,'12':0x7D,'14':0xFA,'15':0x59,'16':0x47,'17':0xF0,
    '18':0xAD,'19':0xD4,'1A':0xA2,'1B':0xAF,'1C':0x9C,'1D':0xA4,'1E':0x72,'1F':0xC0,
    '20':0xB7,'21':0xFD,'22':0x93,'23':0x26,'24':0x36,'25':0x3F,'26':0xF7,'27':0xCC,
    '28':0x34,'29':0xA5,'2A':0xE5,'2B':0xF1,'2C':0x71,'2D':0xD8,'2E':0x31,'2F':0x15,
    '30':0x04,'31':0xC7,'32':0x23,'33':0xC3,'34':0x18,'35':0x96,'36':0x05,'37':0x9A, 
    '38':0x07,'39':0x12,'3A':0x80,'3B':0xE2,'3C':0xEB,'3D':0x27,'3E':0xB2,'3F':0x75,
    '40':0x09,'41':0x83,'42':0x2C,'43':0x1A,'44':0x1B,'45':0x6E,'46':0x5A,'47':0xA0,
    '48':0x52,'49':0x3B,'4A':0xD6,'4B':0xB3,'4C':0x29,'4D':0xE3,'4E':0x2F,'4F':0x84,
    '50':0x53,'51':0xD1,'52':0x00,'53':0xED,'54':0x20,'55':0xFC,'56':0xB1,'57':0x5B, 
    '58':0x6A,'59':0xCB,'5A':0xBE,'5B':0x39,'5C':0x4A,'5D':0x4C,'5E':0x58,'5F':0xCF,
   0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
   0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
   0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
   0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
   0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
   0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
   0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
   0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
   0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
   0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16);
